const algorithm={weights:[],closest:{balance:Number.POSITIVE_INFINITY,diff:Number.POSITIVE_INFINITY},autres:[],freeWeights:[],fixedLeft:[],fixedRight:[],countBalance:(a,d)=>{rTotal=lTotal=0;for(let c=0;c<a.length;c++)lTotal+=a[c].w;for(a=0;a<d.length;a++)rTotal+=d[a].w;b=lTotal-rTotal;return[b,[lTotal,rTotal]]},newSplit:(a,d,c=[],f=[])=>{for(var e=0;e<a.length;e++)c.push(d[a[e]]);for(e=0;e<d.length;e++)a.includes(e)||f.push(d[e]);return[c,f]},backSplit:(a,d,c=[],f=[])=>{for(var e=0;e<a.length;e++)f.push(d[a[e]]);
for(e=0;e<d.length;e++)a.includes(e)||c.push(d[e]);return[c,f]},c:(a,d,c)=>{if(2>a.length)return!1;if(a[c]==d)if(1!=c)a=algorithm.c(a,d-1,c-1),a[c]=a[c-1]+1;else return!1;else a[c]+=1;return a},splitArray:(a,d,c,f)=>{d=f.length/2-d;c=[];f=!0;for(let e=0;e<d;e++)c.push(e);for(;f;)s=algorithm.newSplit(c,a),s2=algorithm.backSplit(c,a),l1=[...s[0],...algorithm.fixedLeft],r1=[...s[1],...algorithm.fixedRight],l2=[...s2[0],...algorithm.fixedLeft],r2=[...s2[1],...algorithm.fixedRight],count=algorithm.countBalance(l1,
r1),count2=algorithm.countBalance(l2,r2),diff=count[0],0>diff&&(diff*=-1),diff<algorithm.closest.diff?algorithm.closest={balance:count[0],diff,totals:count[1],left:l1,right:r1,leftPercent:count[1][0]/(count[1][0]+count[1][1])*100,rightPercent:count[1][1]/(count[1][0]+count[1][1])*100}:diff==algorithm.closest.diff&&algorithm.autres.push({balance:count[0],diff,totals:count[1],left:l1,right:r1,leftPercent:count[1][0]/(count[1][0]+count[1][1])*100,rightPercent:count[1][1]/(count[1][0]+count[1][1])*100}),
diff2=count2[0],0>diff2&&(diff2*=-1),diff2<algorithm.closest.diff?algorithm.closest={balance:count2[0],diff:diff2,totals:count2[1],left:l2,right:r2,leftPercent:count2[1][0]/(count2[1][0]+count2[1][1])*100,rightPercent:count2[1][1]/(count2[1][0]+count2[1][1])*100}:diff2==algorithm.closest.diff&&algorithm.autres.push({balance:count2[0],diff:diff2,totals:count2[1],left:l2,right:r2,leftPercent:count2[1][0]/(count2[1][0]+count2[1][1])*100,rightPercent:count2[1][1]/(count2[1][0]+count2[1][1])*100}),(c=
algorithm.c(c,a.length-1,c.length-1))||(f=!1)},balance:(a,d=10)=>{a&&(algorithm.weights=a);algorithm.closest={balance:Number.POSITIVE_INFINITY,diff:Number.POSITIVE_INFINITY};algorithm.autres=[];algorithm.freeWeights=[];algorithm.fixedLeft=[];algorithm.fixedRight=[];a=algorithm.weights;for(let c=0;c<a.length;c++)a[c].active&&("left"==a[c].side?algorithm.fixedLeft.push({n:a[c].name,w:parseInt(a[c].weight,10)}):"right"==a[c].side?algorithm.fixedRight.push({n:a[c].name,w:parseInt(a[c].weight,10)}):"any"==
a[c].side&&algorithm.freeWeights.push({n:a[c].name,w:parseInt(a[c].weight,10)}));wLength=[...algorithm.fixedLeft,...algorithm.fixedRight,...algorithm.freeWeights].length;if(1==wLength%2)return"odd";if(wLength>2*d)return"seats";if(algorithm.fixedLeft.length>algorithm.fixedRight.length+algorithm.freeWeights.length||algorithm.fixedRight.length>algorithm.fixedLeft.length+algorithm.freeWeights.length)return"picky";algorithm.splitArray(algorithm.freeWeights,algorithm.fixedLeft.length,algorithm.fixedRight.length,
[...algorithm.fixedLeft,...algorithm.fixedRight,...algorithm.freeWeights]);bestDifference=algorithm.closest.diff;newAutres=[];for(d=0;d<algorithm.autres.length;d++)algorithm.autres[d].diff==bestDifference&&newAutres.push(algorithm.autres[d]);algorithm.autres=newAutres;return{closest:algorithm.closest,alternatives:algorithm.autres}}};
